{
	"info": {
		"_postman_id": "7cf277bb-4898-4025-a216-ad6f06b2b133",
		"name": "store",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "29382520"
	},
	"item": [
		{
			"name": "Products",
			"item": [
				{
					"name": "Create product",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// const baseUrl = pm.variables.get('baseUrl');\r",
									"// const endpoint = '/products';\r",
									"// const requestData = {\r",
									"//     'name': 'orange',\r",
									"//     'price': 20,\r",
									"//     'sku': 123321123,\r",
									"//     'description': 'wouh'\r",
									"// };\r",
									"// pm.sendRequest({\r",
									"//     url: baseUrl + endpoint,\r",
									"//     method: 'POST',\r",
									"//     header: { 'Content-Type': 'application/json' },\r",
									"//     body: {\r",
									"//         mode: 'raw',\r",
									"//         raw: JSON.stringify(requestData)\r",
									"//     }\r",
									"// }, function (err, response) {\r",
									"//     pm.test('Response time is less than 200ms', function () {\r",
									"//         pm.expect(response.responseTime).to.be.below(200);\r",
									"//     });\r",
									"//     pm.test('Status code is 201', function () {\r",
									"//         pm.expect(response.code).to.equal(201);\r",
									"//     });\r",
									"//     pm.test('Content-Type is present', function () {\r",
									"//         pm.expect(response.headers.has('Content-Type')).to.be.true;\r",
									"//     });\r",
									"\r",
									"//     pm.test('Checking the product creation and schema verification', function () {\r",
									"//         const createdProductId = response.json().id;\r",
									"//         pm.sendRequest({\r",
									"//             url: `${baseUrl}/products/${createdProductId}`,\r",
									"//             method: 'GET'\r",
									"//             }, function (err, getProductResponse) {\r",
									"//                 pm.expect(getProductResponse.code).to.equal(200);\r",
									"//                 const createdProductData = getProductResponse.json();\r",
									"//                 pm.expect(createdProductData.name).to.eql(requestData.name);\r",
									"//                 pm.expect(createdProductData.price).to.eql(requestData.price);\r",
									"//                 pm.expect(createdProductData.sku).to.eql(requestData.sku);\r",
									"//                 pm.expect(createdProductData.description).to.eql(requestData.description);\r",
									"//                 var jsonSchema = {\r",
									"//                     \"type\": \"object\",\r",
									"//                     \"properties\": {\r",
									"//                     \"name\": {\"type\": \"string\"},\r",
									"//                     \"price\": {\"type\": \"integer\"},\r",
									"//                     \"sku\": {\"type\": \"integer\"},\r",
									"//                     \"description\": {\"type\": \"string\"},\r",
									"//                     \"id\": {\"type\": \"integer\"}\r",
									"//                 },\r",
									"//                 \"required\": [\"id\", \"name\", \"price\", \"sku\", \"description\"]\r",
									"//                 };\r",
									"//                 pm.expect(getProductResponse.json()).to.have.jsonSchema(jsonSchema);\r",
									"//         });\r",
									"//     });\r",
									"// });\r",
									"\r",
									"\r",
									"const baseUrl = pm.variables.get('baseUrl');\r",
									"const endpoint = '/products';\r",
									"const requestData = {\r",
									"    'name': 'orange',\r",
									"    'price': 20,\r",
									"    'sku': 123321123,\r",
									"    'description': 'wouh'\r",
									"};\r",
									"\r",
									"// POST request to create a product\r",
									"pm.sendRequest({\r",
									"    url: baseUrl + endpoint,\r",
									"    method: 'POST',\r",
									"    header: { 'Content-Type': 'application/json' },\r",
									"    body: {\r",
									"        mode: 'raw',\r",
									"        raw: JSON.stringify(requestData)\r",
									"    }\r",
									"}, function (err, response) {\r",
									"    pm.test('Response time is less than 200ms', function () {\r",
									"        pm.expect(response.responseTime).to.be.below(200);\r",
									"    });\r",
									"    pm.test('Status code is 201', function () {\r",
									"        pm.expect(response.code).to.equal(201);\r",
									"    });\r",
									"    pm.test('Content-Type is present', function () {\r",
									"        pm.expect(response.headers.has('Content-Type')).to.be.true;\r",
									"    });\r",
									"\r",
									"    // Check the product creation and schema verification\r",
									"    const createdProductId = response.json().id;\r",
									"    pm.sendRequest({\r",
									"        url: `${baseUrl}/products/${createdProductId}`,\r",
									"        method: 'GET'\r",
									"    }, function (err, getProductResponse) {\r",
									"        pm.expect(getProductResponse.code).to.equal(200);\r",
									"        const createdProductData = getProductResponse.json();\r",
									"\r",
									"        // Assertions for the created product\r",
									"        pm.expect(createdProductData.name).to.eql(requestData.name);\r",
									"        pm.expect(createdProductData.price).to.eql(requestData.price);\r",
									"        pm.expect(createdProductData.sku).to.eql(requestData.sku);\r",
									"        pm.expect(createdProductData.description).to.eql(requestData.description);\r",
									"\r",
									"        // JSON schema verification\r",
									"        var jsonSchema = {\r",
									"            \"type\": \"object\",\r",
									"            \"properties\": {\r",
									"                \"name\": {\"type\": \"string\"},\r",
									"                \"price\": {\"type\": \"integer\"},\r",
									"                \"sku\": {\"type\": \"integer\"},\r",
									"                \"description\": {\"type\": \"string\"},\r",
									"                \"id\": {\"type\": \"integer\"}\r",
									"            },\r",
									"            \"required\": [\"id\", \"name\", \"price\", \"sku\", \"description\"]\r",
									"        };\r",
									"        pm.expect(createdProductData).to.have.jsonSchema(jsonSchema);\r",
									"    });\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "// {\r\n//     \"name\": \"orange\",\r\n//     \"price\": 20,\r\n//     \"sku\": 123321123,\r\n//     \"description\": \"wouh\"\r\n// }",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseURL}}/products",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"products"
							],
							"query": [
								{
									"key": "baseUrl",
									"value": null,
									"disabled": true
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "List products",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const baseUrl = pm.variables.get('baseUrl');\r",
									"const endpoint = '/products';\r",
									"\r",
									"pm.sendRequest({\r",
									"    url: baseUrl + endpoint,\r",
									"    method: 'GET',\r",
									"}, function (err, response) {\r",
									"    pm.test(\"Response time is less than 200ms\", function () {\r",
									"        pm.expect(response.responseTime).to.be.below(200);\r",
									"    });\r",
									"    pm.test(\"Status code is 200\", function () {\r",
									"        pm.expect(response.code).to.equal(200);\r",
									"    });\r",
									"    pm.test(\"Content-Type is present\", function () {\r",
									"        pm.expect(response.headers.has(\"Content-Type\")).to.be.true;\r",
									"    });\r",
									"    pm.test('Response should match JSON schema', function () {\r",
									"        var jsonSchema = {\r",
									"            \"type\": \"array\",\r",
									"            \"items\": {\r",
									"                \"type\": \"object\",\r",
									"                \"properties\": {\r",
									"                    \"id\": { \"type\": \"number\" },\r",
									"                    \"name\": { \"type\": \"string\" },\r",
									"                    \"price\": { \"type\": \"number\" },\r",
									"                    \"sku\": { \"type\": \"number\" },\r",
									"                    \"description\": { \"type\": \"string\" }\r",
									"                },\r",
									"                \"required\": [\"id\", \"name\", \"price\", \"sku\", \"description\"]\r",
									"            }\r",
									"        };\r",
									"        pm.response.to.have.jsonSchema(jsonSchema);\r",
									"    });\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/products",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"products"
							]
						}
					},
					"response": []
				},
				{
					"name": "Pagination",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const baseUrl = pm.variables.get('baseUrl');\r",
									"const endpoint = \"/users?page=1&pageSize=2\";\r",
									"\r",
									"pm.sendRequest({\r",
									"    url: baseUrl + endpoint,\r",
									"    method: 'GET',\r",
									"}, function (err, response) {\r",
									"    const responseBody = response.json();\r",
									"    pm.test('Response status is 200', function () {\r",
									"        pm.response.to.have.status(200);\r",
									"    });\r",
									"    pm.test(\"Response time is less than 200ms\", function () {\r",
									"        pm.expect(response.responseTime).to.be.below(200);\r",
									"    });\r",
									"    pm.test('Exactly two products on the page', function () {\r",
									"        pm.expect(responseBody.length).to.eql(2);\r",
									"    });\r",
									"    pm.test('JSON schema validation', function () {\r",
									"        var jsonSchema = {\r",
									"            \"type\": \"array\",\r",
									"            \"items\": {\r",
									"                \"type\": \"object\",\r",
									"                \"properties\": {\r",
									"                    \"id\": { \"type\": \"number\" },\r",
									"                    \"name\": { \"type\": \"string\" },\r",
									"                    \"price\": { \"type\": \"number\" },\r",
									"                    \"sku\": { \"type\": \"number\" },\r",
									"                    \"description\": { \"type\": \"string\" }\r",
									"                },\r",
									"                \"required\": [\"id\", \"name\", \"price\", \"sku\", \"description\"]\r",
									"            }\r",
									"        };\r",
									"        pm.response.to.have.jsonSchema(jsonSchema);\r",
									"    });\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/products?page=1&pageSize=2",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"products"
							],
							"query": [
								{
									"key": "limit",
									"value": "2",
									"disabled": true
								},
								{
									"key": "page",
									"value": "1"
								},
								{
									"key": "pageSize",
									"value": "2"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Sorting",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"function testSortingOrder(sortOrder, sortKey) {\r",
									"    var url = pm.variables.get(\"baseUrl\") + `/products?sortOrder=${sortOrder}&sortKey=${sortKey}`;\r",
									"    pm.sendRequest({\r",
									"        url: url,\r",
									"        method: 'GET'\r",
									"    }, function (err, response) {\r",
									"        pm.expect(response.code).to.equal(200);\r",
									"        var products = response.json();\r",
									"        var compareFunction;\r",
									"        if (sortOrder === 'ASC') {\r",
									"            compareFunction = function(a, b) {\r",
									"                return a[sortKey] <= b[sortKey];\r",
									"            };\r",
									"        } \r",
									"        if (sortOrder === 'DESC') {\r",
									"            compareFunction = function(a, b) {\r",
									"                return a[sortKey] >= b[sortKey];\r",
									"            };\r",
									"        }\r",
									"        for (var i = 0; i < products.length - 1; i++) {\r",
									"            pm.expect(compareFunction(products[i], products[i + 1])).to.be.true;\r",
									"        }\r",
									"    });\r",
									"}\r",
									"pm.test(\"Test Sorting ASC by name\", function () {\r",
									"    testSortingOrder('ASC', 'name');\r",
									"});\r",
									"\r",
									"pm.test(\"Test Sorting DESC by name\", function () {\r",
									"    testSortingOrder('DESC', 'name');\r",
									"});\r",
									"\r",
									"pm.test(\"Test Sorting ASC by id\", function () {\r",
									"    testSortingOrder('ASC', 'id');\r",
									"});\r",
									"\r",
									"pm.test(\"Test Sorting DESC by id\", function () {\r",
									"    testSortingOrder('DESC', 'id');\r",
									"});\r",
									"\r",
									"pm.test(\"Test Sorting ASC by price\", function () {\r",
									"    testSortingOrder('ASC', 'price');\r",
									"});\r",
									"\r",
									"pm.test(\"Test Sorting DESC by price\", function () {\r",
									"    testSortingOrder('DESC', 'price');\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/products?sortOrder=DESC&sortKey=price",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"products"
							],
							"query": [
								{
									"key": "sortOrder",
									"value": "DESC"
								},
								{
									"key": "sortKey",
									"value": "price"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Get product by ID",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const baseUrl = pm.variables.get(\"baseUrl\");\r",
									"const productId = 3;\r",
									"pm.sendRequest({\r",
									"    url: `${baseUrl}/products/${productId}`,\r",
									"    method: 'GET',\r",
									"}, function (err, response) {\r",
									"    pm.test(\"Response time is less than 200ms\", function () {\r",
									"        pm.expect(pm.response.responseTime).to.be.below(200);\r",
									"    });\r",
									"    pm.test(\"Status code is 200\", function () {\r",
									"        pm.response.to.have.status(200);\r",
									"    });\r",
									"    pm.test(\"Content-Type is present\", function () {\r",
									"        pm.response.to.have.header(\"Content-Type\");\r",
									"    }); \r",
									"    const responseBody = response.json();\r",
									"    pm.test('Product has correct ID', function () {\r",
									"        pm.expect(responseBody.id).to.eql(productId);\r",
									"    });\r",
									"    pm.test('JSON schema validation', function () {\r",
									"        var jsonSchema = {\r",
									"            \"type\": \"object\",\r",
									"            \"properties\": {\r",
									"                \"name\": {\"type\": \"string\"},\r",
									"                \"price\": {\"type\": \"integer\"},\r",
									"                \"sku\": {\"type\": \"integer\"},\r",
									"                \"description\": {\"type\": \"string\"},\r",
									"                \"id\": {\"type\": \"integer\"}\r",
									"            },\r",
									"            \"required\": [\"id\", \"name\", \"price\", \"sku\", \"description\"]\r",
									"        };\r",
									"        pm.expect(response.json()).to.have.jsonSchema(jsonSchema);\r",
									"    });\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/products/3",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"products",
								"3"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update product",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const baseUrl = pm.variables.get('baseUrl');\r",
									"\r",
									"const endpoint = '/products';\r",
									"\r",
									"const updateData = {\r",
									"    'id': 4,\r",
									"    'name': 'banana',\r",
									"    'price': 27,\r",
									"    'sku': 123321123,\r",
									"    'description': 'changed description'\r",
									"};\r",
									"\r",
									"pm.sendRequest({\r",
									"    url: `${ baseUrl }${ endpoint }/${ updateData.id }`,\r",
									"    method: 'PUT'\r",
									"}, function (err, response) {\r",
									"    pm.test('Response time is less than 200ms', function () {\r",
									"        pm.expect(response.responseTime).to.be.below(200);\r",
									"    });\r",
									"    pm.test('Status code is 200', function () {\r",
									"        pm.response.to.have.status(200);\r",
									"    });\r",
									"    pm.test('Content-Type is present', function () {\r",
									"        pm.expect(response.headers.has('Content-Type')).to.be.true;\r",
									"    });\r",
									"    pm.test('Product was updated successfully', function () {\r",
									"        pm.sendRequest({\r",
									"            url: `${ baseUrl }${ endpoint }/${ updateData.id }`,\r",
									"            method: 'GET'\r",
									"        }, function (err, getProductResponse) {\r",
									"            pm.expect(getProductResponse.code).to.equal(200);\r",
									"            const updatedProductData = getProductResponse.json();\r",
									"            pm.expect(updatedProductData.name).to.eql(updateData.name);\r",
									"            pm.expect(updatedProductData.price).to.eql(updateData.price);\r",
									"            pm.expect(updatedProductData.sku).to.eql(updateData.sku);\r",
									"            pm.expect(updatedProductData.description).to.eql(updateData.description);\r",
									"        });\r",
									"    });\r",
									"})\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"id\": 4,\r\n    \"name\": \"banana\",\r\n    \"price\": 27,\r\n    \"sku\": 123321123,\r\n    \"description\": \"changed description\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/products",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"products"
							]
						}
					},
					"response": []
				},
				{
					"name": "Remove product by ID",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const baseUrl = pm.variables.get('baseUrl');\r",
									"const endpoint = '/products';\r",
									"const Data = {\r",
									"    \"id\": 4,\r",
									"    \"name\": \"banana\",\r",
									"    \"price\": 27,\r",
									"    \"sku\": 123321123,\r",
									"    \"description\": \"changed description\"\r",
									"};\r",
									"pm.sendRequest({\r",
									"    url: `${baseUrl}${endpoint}/${Data.id}`,\r",
									"    method: 'DELETE',\r",
									"}, function (err, response) {\r",
									"    pm.test(\"Response time is less than 200ms\", function () {\r",
									"        pm.expect(response.responseTime).to.be.below(200);\r",
									"    });\r",
									"    pm.test(\"Status code is 200\", function () {\r",
									"        pm.expect(response.code).to.equal(200);\r",
									"    });\r",
									"    pm.test(\"Content-Type is present\", function () {\r",
									"        pm.expect(response.headers.has(\"Content-Type\")).to.be.true;\r",
									"    });\r",
									"    pm.sendRequest({\r",
									"        url: `${baseUrl}${endpoint}/${Data.id}`,\r",
									"        method: 'GET'\r",
									"    }, function (err, getProductResponse) {\r",
									"        pm.test(\"Verify product was deleted\", function () {\r",
									"            pm.expect(getProductResponse.code).to.equal(404);\r",
									"        });\r",
									"    });\r",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/products/5",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"products",
								"5"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Orders",
			"item": [
				{
					"name": "List orders",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/orders",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"orders"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get order by ID",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/orders/3",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"orders",
								"3"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create order",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\": \"order5\",\r\n    \"sku\": 123425445656765\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/orders",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"orders"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update order",
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"id\": 4,\r\n    \"name\": \"order5\",\r\n    \"sku\": 123425445656765\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/orders",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"orders"
							]
						}
					},
					"response": []
				},
				{
					"name": "Remove order by ID",
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/orders/4",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"orders",
								"4"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Users",
			"item": [
				{
					"name": "List users",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/users",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"users"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get user by ID",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/users/3",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"users",
								"3"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create user",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"firstName\": \"Dream\",\r\n    \"lastName\": \"Real\",\r\n    \"email\": \"dream.real@gmail.com\",\r\n    \"dateOfBirth\": \"2001-10-99\",\r\n    \"emailVerified\": true,\r\n    \"signUpDate\": \"2019-08-24\",\r\n    \"status\": \"active\",\r\n    \"level\": \"lord\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/users",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"users"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update user",
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"firstName\": \"Ilon\",\r\n    \"lastName\": \"Mask\",\r\n    \"email\": \"ilon.mask@gmail.com\",\r\n    \"dateOfBirth\": \"2001-10-99\",\r\n    \"emailVerified\": true,\r\n    \"signUpDate\": \"2019-08-24\",\r\n    \"status\": \"active\",\r\n    \"level\": \"lord\",\r\n    \"id\": 10\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/users",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"users"
							]
						}
					},
					"response": []
				},
				{
					"name": "Remove user by ID",
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/users/10",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"users",
								"10"
							]
						}
					},
					"response": []
				}
			]
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "baseUrl",
			"value": "http://localhost:3000",
			"type": "string"
		}
	]
}